from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, logout, authenticate
from .forms import UserRegistrationForm, UserLoginForm
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.contrib.auth import get_user_model
from .models import Course
from .forms import CourseForm


def index(request):
    return render(request, "index.html")  # —â–µ –∏–∑–ø–æ–ª–∑–≤–∞ index.html –∑–∞ –Ω–∞—á–∞–ª–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞

def courses_list(request):
    courses = Course.objects.all()
    return render(request, "courses.html", {"courses": courses})


def register(request):
    if request.method == "POST":
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, "–£—Å–ø–µ—à–Ω–æ —Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞—Ö—Ç–µ! üéâ")
            return redirect("courses")
        else:
            # messages.error(request, "–ú–æ–ª—è, –ø–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∏—Ç–µ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç–∞. ‚ùå")
            # –î–æ–±–∞–≤—è–º –≥—Ä–µ—à–∫–∏—Ç–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞—Ç–æ —Å—ä–æ–±—â–µ–Ω–∏—è
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{field.capitalize()}: {error}")
    else:
        form = UserRegistrationForm()
    return render(request, "register.html", {"form": form})


def login_view(request):
    if request.method == "POST":
        form = UserLoginForm(data=request.POST)
        email = request.POST.get("username")  # Django –≤—Å–µ –æ—â–µ –æ—á–∞–∫–≤–∞ "username", –Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–º email
        password = request.POST.get("password")

        # –¢—Ä—è–±–≤–∞ –¥–∞ –≤–∑–µ–º–µ–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –ø–æ email, –∑–∞—â–æ—Ç–æ authenticate() –æ—á–∞–∫–≤–∞ username
        User = get_user_model()
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            user = None

        if user is not None and user.check_password(password):
            login(request, user)
            messages.success(request, f"–î–æ–±—Ä–µ –¥–æ—à—ä–ª, {user.email}! üòä")
            return redirect("courses")
        else:
            messages.error(request, "–ì—Ä–µ—à–µ–Ω email –∏–ª–∏ –ø–∞—Ä–æ–ª–∞. ‚ùå")

    else:
        form = UserLoginForm()

    return render(request, "login.html", {"form": form})


def logout_view(request):
    logout(request)
    messages.info(request, "–£—Å–ø–µ—à–Ω–æ –∏–∑–ª—è–∑–æ—Ö—Ç–µ –æ—Ç –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏.")
    return redirect("login")


@login_required
def profile(request):
    return render(request, "profile.html", {"user": request.user})


@login_required
def create_course(request):
    #–°–∞–º–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏—Ç–µ –º–æ–≥–∞—Ç –¥–∞ —Å—ä–∑–¥–∞–≤–∞—Ç –∫—É—Ä—Å–æ–≤–µ
    if request.user.role != 'teacher':
        messages.error(request, "–°–∞–º–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥–∞—Ç –¥–∞ —Å—ä–∑–¥–∞–≤–∞—Ç –∫—É—Ä—Å–æ–≤–µ! ‚ùå")
        return redirect("courses")

    if request.method == "POST":
        form = CourseForm(request.POST, request.FILES)  #–î–æ–±–∞–≤–µ–Ω–æ request.FILES –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ
        if form.is_valid():
            course = form.save(commit=False)
            course.creator = request.user  # –ó–∞–¥–∞–≤–∞–º —Ç–µ–∫—É—â–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∫–∞—Ç–æ —Å—ä–∑–¥–∞—Ç–µ–ª
            course.save()
            messages.success(request, "–ö—É—Ä—Å—ä—Ç –±–µ—à–µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! ‚úÖ")
            return redirect("courses")
        else:
            messages.error(request, "–ú–æ–ª—è, –ø–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∏—Ç–µ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç–∞. ‚ùå")
    else:
        form = CourseForm()

    return render(request, "create_course.html", {"form": form})


def course_detail(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    return render(request, "course_detail.html", {"course": course})


@login_required
def edit_course(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if request.user != course.creator:
        messages.error(request, "–ù—è–º–∞—Ç–µ –ø—Ä–∞–≤–æ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—Ç–µ —Ç–æ–∑–∏ –∫—É—Ä—Å! ‚ùå")
        return redirect("courses")

    if request.method == "POST":
        form = CourseForm(request.POST, request.FILES, instance=course)
        if form.is_valid():
            form.save()
            messages.success(request, "–ö—É—Ä—Å—ä—Ç –±–µ—à–µ —É—Å–ø–µ—à–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω! ‚úÖ")
            return redirect("courses")
    else:
        form = CourseForm(instance=course)

    return render(request, "edit_course.html", {"form": form, "course": course})


@login_required
def delete_course(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º –¥–∞–ª–∏ —Ç–µ–∫—É—â–∏—è—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –µ —Å—ä–∑–¥–∞—Ç–µ–ª—è—Ç –Ω–∞ –∫—É—Ä—Å–∞
    if request.user != course.creator:
        messages.error(request, "–ù—è–º–∞—Ç–µ –ø—Ä–∞–≤–æ –¥–∞ –∏–∑—Ç—Ä–∏–≤–∞—Ç–µ —Ç–æ–∑–∏ –∫—É—Ä—Å! ‚ùå")
        return redirect("courses")

    if request.method == "POST":
        course.delete()
        messages.success(request, "–ö—É—Ä—Å—ä—Ç –±–µ—à–µ —É—Å–ø–µ—à–Ω–æ –∏–∑—Ç—Ä–∏—Ç! üóë")
        return redirect("courses")

    return render(request, "delete_course.html", {"course": course})
