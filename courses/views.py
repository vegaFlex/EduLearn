from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, logout, authenticate
from .forms import UserRegistrationForm, UserLoginForm
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.contrib.auth import get_user_model
from .forms import CourseForm
from django.db.models import  Avg, Q  # –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–º –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ —Å OR
from django.http import JsonResponse
import stripe
from django.urls import reverse
from django.conf import settings
from .models import Quiz, Question, QuizResult, CompletedLesson, Lesson, Course, Order, Review
from .forms import ReviewForm

stripe.api_key = settings.STRIPE_SECRET_KEY


def index(request):
    return render(request, "index.html")  # —â–µ –∏–∑–ø–æ–ª–∑–≤–∞ index.html –∑–∞ –Ω–∞—á–∞–ª–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞


# def courses_list(request):
#     courses = Course.objects.all()
#     return render(request, "courses.html", {"courses": courses})

def courses_list(request):
    query = request.GET.get('q')
    category = request.GET.get('category')
    min_price = request.GET.get('min_price')
    max_price = request.GET.get('max_price')

    min_rating = request.GET.get('rating')  # –í–∑–∏–º–∞–º —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç –∑–∞—è–≤–∫–∞—Ç–∞

    # courses = Course.objects.all()
    courses = Course.objects.annotate(average_rating=Avg("reviews__rating"))  # –ê–Ω–æ—Ç–∞—Ü–∏—è –∑–∞ —Å—Ä–µ–¥–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥

    if query:
        courses = courses.filter(Q(title__icontains=query) | Q(description__icontains=query))

    if category:
        courses = courses.filter(category=category)

    if min_price:
        courses = courses.filter(price__gte=min_price)

    if max_price:
        courses = courses.filter(price__lte=max_price)

    if min_rating:  # –§–∏–ª—Ç—ä—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥
        courses = courses.filter(rating__gte=min_rating)

    return render(request, "courses.html", {
        "courses": courses,
        "query": query,
        "category": category,
        "min_price": min_price,
        "max_price": max_price,
        "min_rating": min_rating,
    })


def register(request):
    if request.method == "POST":
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, "–£—Å–ø–µ—à–Ω–æ —Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞—Ö—Ç–µ! üéâ")
            return redirect("courses")
        else:
            # messages.error(request, "–ú–æ–ª—è, –ø–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∏—Ç–µ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç–∞. ‚ùå")
            # –î–æ–±–∞–≤—è–º –≥—Ä–µ—à–∫–∏—Ç–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞—Ç–æ —Å—ä–æ–±—â–µ–Ω–∏—è
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{field.capitalize()}: {error}")
    else:
        form = UserRegistrationForm()
    return render(request, "register.html", {"form": form})


def login_view(request):
    if request.method == "POST":
        form = UserLoginForm(data=request.POST)
        email = request.POST.get("username")  # Django –≤—Å–µ –æ—â–µ –æ—á–∞–∫–≤–∞ "username", –Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–º email
        password = request.POST.get("password")

        # –¢—Ä—è–±–≤–∞ –¥–∞ –≤–∑–µ–º–µ–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –ø–æ email, –∑–∞—â–æ—Ç–æ authenticate() –æ—á–∞–∫–≤–∞ username
        User = get_user_model()
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            user = None

        if user is not None and user.check_password(password):
            login(request, user)
            messages.success(request, f"–î–æ–±—Ä–µ –¥–æ—à—ä–ª, {user.email}! üòä")
            return redirect("courses")
        else:
            messages.error(request, "–ì—Ä–µ—à–µ–Ω email –∏–ª–∏ –ø–∞—Ä–æ–ª–∞. ‚ùå")

    else:
        form = UserLoginForm()

    return render(request, "login.html", {"form": form})


def logout_view(request):
    logout(request)
    messages.info(request, "–£—Å–ø–µ—à–Ω–æ –∏–∑–ª—è–∑–æ—Ö—Ç–µ –æ—Ç –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏.")
    return redirect("login")


@login_required
def profile(request):
    return render(request, "profile.html", {"user": request.user})


@login_required
def create_course(request):
    # –°–∞–º–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏—Ç–µ –º–æ–≥–∞—Ç –¥–∞ —Å—ä–∑–¥–∞–≤–∞—Ç –∫—É—Ä—Å–æ–≤–µ
    if request.user.role != 'teacher':
        messages.error(request, "–°–∞–º–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥–∞—Ç –¥–∞ —Å—ä–∑–¥–∞–≤–∞—Ç –∫—É—Ä—Å–æ–≤–µ! ‚ùå")
        return redirect("courses")

    if request.method == "POST":
        form = CourseForm(request.POST, request.FILES)  # –î–æ–±–∞–≤–µ–Ω–æ request.FILES –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ
        if form.is_valid():
            course = form.save(commit=False)
            course.creator = request.user  # –ó–∞–¥–∞–≤–∞–º —Ç–µ–∫—É—â–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∫–∞—Ç–æ —Å—ä–∑–¥–∞—Ç–µ–ª
            course.save()
            messages.success(request, "–ö—É—Ä—Å—ä—Ç –±–µ—à–µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! ‚úÖ")
            return redirect("courses")
        else:
            messages.error(request, "–ú–æ–ª—è, –ø–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∏—Ç–µ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç–∞. ‚ùå")
    else:
        form = CourseForm()

    return render(request, "create_course.html", {"form": form})


# def course_detail(request, course_id):
#     course = get_object_or_404(Course, id=course_id)
#     return render(request, "course_detail.html", {"course": course})

def course_detail(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    lessons = course.lessons.all()  # –í–∑–∏–º–∞–º–µ –≤—Å–∏—á–∫–∏ —É—Ä–æ—Ü–∏ –∑–∞ —Ç–æ–∑–∏ –∫—É—Ä—Å

    return render(request, "course_detail.html", {
        "course": course,
        "lessons": lessons,
        "STRIPE_PUBLISHABLE_KEY": settings.STRIPE_PUBLISHABLE_KEY
    })


@login_required
def edit_course(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if request.user != course.creator:
        messages.error(request, "–ù—è–º–∞—Ç–µ –ø—Ä–∞–≤–æ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—Ç–µ —Ç–æ–∑–∏ –∫—É—Ä—Å! ‚ùå")
        return redirect("courses")

    if request.method == "POST":
        form = CourseForm(request.POST, request.FILES, instance=course)
        if form.is_valid():
            form.save()
            messages.success(request, "–ö—É—Ä—Å—ä—Ç –±–µ—à–µ —É—Å–ø–µ—à–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω! ‚úÖ")
            return redirect("courses")
    else:
        form = CourseForm(instance=course)

    return render(request, "edit_course.html", {"form": form, "course": course})


@login_required
def delete_course(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º –¥–∞–ª–∏ —Ç–µ–∫—É—â–∏—è—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –µ —Å—ä–∑–¥–∞—Ç–µ–ª—è—Ç –Ω–∞ –∫—É—Ä—Å–∞
    if request.user != course.creator:
        messages.error(request, "–ù—è–º–∞—Ç–µ –ø—Ä–∞–≤–æ –¥–∞ –∏–∑—Ç—Ä–∏–≤–∞—Ç–µ —Ç–æ–∑–∏ –∫—É—Ä—Å! ‚ùå")
        return redirect("courses")

    if request.method == "POST":
        course.delete()
        messages.success(request, "–ö—É—Ä—Å—ä—Ç –±–µ—à–µ —É—Å–ø–µ—à–Ω–æ –∏–∑—Ç—Ä–∏—Ç! üóë")
        return redirect("courses")

    return render(request, "delete_course.html", {"course": course})


@login_required
def create_checkout_session(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    # –°—ä–∑–¥–∞–≤–∞–º Stripe Checkout —Å–µ—Å–∏—è
    session = stripe.checkout.Session.create(
        payment_method_types=["card"],
        line_items=[
            {
                "price_data": {
                    "currency": "bgn",
                    "product_data": {
                        "name": course.title,
                    },
                    "unit_amount": int(course.price * 100),  # –¶–µ–Ω–∞—Ç–∞ –≤ —Å—Ç–æ—Ç–∏–Ω–∫–∏
                },
                "quantity": 1,
            }
        ],
        mode="payment",
        success_url=request.build_absolute_uri(reverse("payment_success")) + "?session_id={CHECKOUT_SESSION_ID}",
        cancel_url=request.build_absolute_uri(reverse("payment_cancel")),
    )

    # —Å—ä–∑–¥–∞–≤–∞–º –ø–æ—Ä—ä—á–∫–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
    order = Order.objects.create(
        user=request.user,
        course=course,
        amount=course.price,
        stripe_payment_id=session.id,
        is_paid=False,
    )

    return JsonResponse({"sessionId": session.id})


def payment_success(request):
    session_id = request.GET.get("session_id")
    if not session_id:
        return redirect("courses")

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ä—ä—á–∫–∞—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    order = get_object_or_404(Order, stripe_payment_id=session_id)
    order.is_paid = True
    order.save()

    # –∑–∞–ø–∏—Å–≤–∞–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ –∫—É—Ä—Å–∞
    order.course.students.add(order.user)

    messages.success(request, "–£—Å–ø–µ—à–Ω–æ –ø–ª–∞—Ç–∏—Ö—Ç–µ –∫—É—Ä—Å–∞!")
    # return redirect("profile")
    return render(request, "payment_success.html", {
        "order": order
    })


def payment_cancel(request):
    messages.error(request, "–ü–ª–∞—â–∞–Ω–µ—Ç–æ –±–µ—à–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return redirect("courses")


@login_required
def my_courses(request):
    courses = request.user.enrolled_courses.all()  # –≤—Å–∏—á–∫–∏ –∫—É—Ä—Å–æ–≤–µ, –≤ –∫–æ–∏—Ç–æ –µ –∑–∞–ø–∏—Å–∞–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç
    return render(request, "my_courses.html", {"courses": courses})



@login_required
def quiz_detail(request, quiz_id):
    quiz = get_object_or_404(Quiz, id=quiz_id)
    questions = quiz.questions.all()

    if request.method == "POST":
        score = 0
        total_questions = questions.count()

        for question in questions:
            selected_answer = request.POST.get(f"question_{question.id}")
            if selected_answer and selected_answer == question.correct_answer:
                score += 1

        final_score = int((score / total_questions) * 100)
        QuizResult.objects.create(user=request.user, quiz=quiz, score=final_score)

        messages.success(request, f"–¢–µ—Å—Ç—ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω! –í–∞—à–∏—è—Ç —Ä–µ–∑—É–ª—Ç–∞—Ç: {final_score}%")
        return redirect("my_courses")

    return render(request, "quiz_detail.html", {"quiz": quiz, "questions": questions})

@login_required
def mark_lesson_completed(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)
    CompletedLesson.objects.get_or_create(user=request.user, lesson=lesson)
    messages.success(request, "–£—Ä–æ–∫—ä—Ç –µ –º–∞—Ä–∫–∏—Ä–∞–Ω –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω! ‚úÖ")
    return redirect("my_courses")


@login_required
def add_review(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if request.method == "POST":
        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            review.user = request.user
            review.course = course
            review.is_approved = False  # –≤—Å–∏—á–∫–∏ —Ä–µ–≤—é—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–∞—Ç –æ–¥–æ–±—Ä–µ–Ω–∏ –æ—Ç –∞–¥–º–∏–Ω
            review.save()
            messages.info(request, "–í–∞—à–µ—Ç–æ —Ä–µ–≤—é –±–µ—à–µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–æ –∑–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ! ‚úÖ")
            # messages.success(request, "–í–∞—à–µ—Ç–æ —Ä–µ–≤—é –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return redirect('course_detail', course_id=course.id)
    else:
        form = ReviewForm()

    return render(request, "add_review.html", {"form": form, "course": course})
