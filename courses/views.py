from .models import Course
from django.shortcuts import render, redirect
from django.contrib.auth import login, logout, authenticate
from .forms import UserRegistrationForm, UserLoginForm
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.contrib.auth import get_user_model


def courses_list(request):
    courses = Course.objects.all()
    return render(request, "courses.html", {"courses": courses})


def register(request):
    if request.method == "POST":
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, "–£—Å–ø–µ—à–Ω–æ —Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞—Ö—Ç–µ! üéâ")
            return redirect("courses")
        else:
            # messages.error(request, "–ú–æ–ª—è, –ø–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∏—Ç–µ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç–∞. ‚ùå")
            # –î–æ–±–∞–≤—è–º –≥—Ä–µ—à–∫–∏—Ç–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞—Ç–æ —Å—ä–æ–±—â–µ–Ω–∏—è
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{field.capitalize()}: {error}")
    else:
        form = UserRegistrationForm()
    return render(request, "register.html", {"form": form})


# def login_view(request):
#     if request.method == "POST":
#         form = UserLoginForm(data=request.POST)
#         if form.is_valid():
#             user = form.get_user()
#             login(request, user)
#             messages.success(request, f"–î–æ–±—Ä–µ –¥–æ—à—ä–ª, {user.email}! üòä")
#             return redirect("courses")
#         else:
#             messages.error(request, "–ì—Ä–µ—à–µ–Ω email –∏–ª–∏ –ø–∞—Ä–æ–ª–∞. ‚ùå")
#     else:
#         form = UserLoginForm()
#     return render(request, "login.html", {"form": form})


def login_view(request):
    if request.method == "POST":
        form = UserLoginForm(data=request.POST)
        email = request.POST.get("username")  # Django –≤—Å–µ –æ—â–µ –æ—á–∞–∫–≤–∞ "username", –Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–º email
        password = request.POST.get("password")

        # –¢—Ä—è–±–≤–∞ –¥–∞ –≤–∑–µ–º–µ–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –ø–æ email, –∑–∞—â–æ—Ç–æ authenticate() –æ—á–∞–∫–≤–∞ username
        User = get_user_model()
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            user = None

        if user is not None and user.check_password(password):
            login(request, user)
            messages.success(request, f"–î–æ–±—Ä–µ –¥–æ—à—ä–ª, {user.email}! üòä")
            return redirect("courses")
        else:
            messages.error(request, "–ì—Ä–µ—à–µ–Ω email –∏–ª–∏ –ø–∞—Ä–æ–ª–∞. ‚ùå")

    else:
        form = UserLoginForm()

    return render(request, "login.html", {"form": form})


def logout_view(request):
    logout(request)
    messages.info(request, "–£—Å–ø–µ—à–Ω–æ –∏–∑–ª—è–∑–æ—Ö—Ç–µ –æ—Ç –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏.")
    return redirect("login")


@login_required
def profile(request):
    return render(request, "profile.html", {"user": request.user})
