# from django import forms
# from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
# from .models import UserProfile
#
#
# class UserRegistrationForm(UserCreationForm):
#     email = forms.EmailField(required=True, label="Email")
#
#     class Meta:
#         model = UserProfile
#         fields = ["email", "password1", "password2", "role"]
#
#     def save(self, commit=True):
#         user = super().save(commit=False)
#         user.username = user.email  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–ø—ä–ª–≤–∞–º username —Å email
#         if commit:
#             user.save()
#         return user
#
#
# # class UserLoginForm(AuthenticationForm):
# #     username = forms.EmailField(label="Email")
#
# class UserLoginForm(AuthenticationForm):
#     username = forms.EmailField(widget=forms.EmailInput(attrs={
#         'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
#         'placeholder': 'Email'
#     }))

# from django import forms
# from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
# from .models import UserProfile
#
# class UserRegistrationForm(UserCreationForm):
#     email = forms.EmailField(
#         required=True,
#         label="–ò–º–µ–π–ª",
#         widget=forms.EmailInput(attrs={
#             'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
#             'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è –∏–º–µ–π–ª'
#         })
#     )
#
#     password1 = forms.CharField(
#         label="–ü–∞—Ä–æ–ª–∞",
#         widget=forms.PasswordInput(attrs={
#             'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
#             'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –ø–∞—Ä–æ–ª–∞'
#         })
#     )
#
#     password2 = forms.CharField(
#         label="–ü–æ–≤—Ç–æ—Ä–µ—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞",
#         widget=forms.PasswordInput(attrs={
#             'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
#             'placeholder': '–ü–æ–≤—Ç–æ—Ä–µ—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞'
#         })
#     )
#
#     role = forms.ChoiceField(
#         choices=UserProfile.ROLE_CHOICES,
#         label="–†–æ–ª—è",
#         widget=forms.Select(attrs={
#             'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500'
#         })
#     )
#
#     class Meta:
#         model = UserProfile
#         fields = ["email", "password1", "password2", "role"]
#
#     error_messages = {
#         'password_mismatch': "–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç! ‚ùå",
#     }
#
#     def save(self, commit=True):
#         user = super().save(commit=False)
#         user.username = user.email  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–ø—ä–ª–≤–∞–º username —Å email
#         if commit:
#             user.save()
#         return user


from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from .models import UserProfile
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _
from django.contrib.auth.password_validation import validate_password

class UserRegistrationForm(UserCreationForm):
    email = forms.EmailField(
        required=True,
        label="–ò–º–µ–π–ª",
        widget=forms.EmailInput(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è –∏–º–µ–π–ª'
        })
    )

    password1 = forms.CharField(
        label="–ü–∞—Ä–æ–ª–∞",
        widget=forms.PasswordInput(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –ø–∞—Ä–æ–ª–∞'
        }),
        error_messages={
            "required": "–ü–æ–ª–µ—Ç–æ –∑–∞ –ø–∞—Ä–æ–ª–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ!",
            "min_length": "–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –ø–æ–Ω–µ 8 —Å–∏–º–≤–æ–ª–∞!",
            "invalid": "–ü–∞—Ä–æ–ª–∞—Ç–∞ —Å—ä–¥—ä—Ä–∂–∞ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏ —Å–∏–º–≤–æ–ª–∏!"
        }
    )

    password2 = forms.CharField(
        label="–ü–æ–≤—Ç–æ—Ä–µ—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞",
        widget=forms.PasswordInput(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–ü–æ–≤—Ç–æ—Ä–µ—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞'
        }),
        error_messages={
            "required": "–ü–æ–ª–µ—Ç–æ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ!",
            "min_length": "–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –ø–æ–Ω–µ 8 —Å–∏–º–≤–æ–ª–∞!",
            "invalid": "–ü–∞—Ä–æ–ª–∞—Ç–∞ —Å—ä–¥—ä—Ä–∂–∞ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏ —Å–∏–º–≤–æ–ª–∏!"
        }
    )

    role = forms.ChoiceField(
        choices=UserProfile.ROLE_CHOICES,
        label="–†–æ–ª—è",
        widget=forms.Select(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500'
        })
    )

    class Meta:
        model = UserProfile
        fields = ["email", "password1", "password2", "role"]

    error_messages = {
        'password_mismatch': "–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç! ‚ùå",
    }

    def clean_password1(self):
        password = self.cleaned_data.get("password1")
        try:
            validate_password(password)
        except ValidationError as e:
            raise forms.ValidationError(_("–ü–∞—Ä–æ–ª–∞—Ç–∞ –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è –Ω–∞ –∏–∑–∏—Å–∫–≤–∞–Ω–∏—è—Ç–∞: ") + " ".join(e.messages))
        return password

    def save(self, commit=True):
        user = super().save(commit=False)
        user.username = user.email  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–ø—ä–ª–≤–∞–º username —Å email
        if commit:
            user.save()
        return user


class UserLoginForm(AuthenticationForm):
    username = forms.EmailField(
        label="–ò–º–µ–π–ª",
        widget=forms.EmailInput(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è –∏–º–µ–π–ª'
        })
    )

    password = forms.CharField(
        label="–ü–∞—Ä–æ–ª–∞",
        widget=forms.PasswordInput(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞'
        })
    )

    error_messages = {
        "invalid_login": "–ì—Ä–µ—à–µ–Ω –∏–º–µ–π–ª –∏–ª–∏ –ø–∞—Ä–æ–ª–∞. ‚ùå",
        "inactive": "–¢–æ–∑–∏ –∞–∫–∞—É–Ω—Ç –µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω! üö´",
    }
