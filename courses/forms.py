from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from .models import UserProfile
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _
from django.contrib.auth.password_validation import validate_password
from django import forms
from .models import Course

class UserRegistrationForm(UserCreationForm):
    email = forms.EmailField(
        required=True,
        label="–ò–º–µ–π–ª",
        widget=forms.EmailInput(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è –∏–º–µ–π–ª'
        })
    )

    password1 = forms.CharField(
        label="–ü–∞—Ä–æ–ª–∞",
        widget=forms.PasswordInput(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –ø–∞—Ä–æ–ª–∞'
        }),
        error_messages={
            "required": "–ü–æ–ª–µ—Ç–æ –∑–∞ –ø–∞—Ä–æ–ª–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ!",
            "min_length": "–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –ø–æ–Ω–µ 8 —Å–∏–º–≤–æ–ª–∞!",
            "invalid": "–ü–∞—Ä–æ–ª–∞—Ç–∞ —Å—ä–¥—ä—Ä–∂–∞ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏ —Å–∏–º–≤–æ–ª–∏!"
        }
    )

    password2 = forms.CharField(
        label="–ü–æ–≤—Ç–æ—Ä–µ—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞",
        widget=forms.PasswordInput(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–ü–æ–≤—Ç–æ—Ä–µ—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞'
        }),
        error_messages={
            "required": "–ü–æ–ª–µ—Ç–æ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ!",
            "min_length": "–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –ø–æ–Ω–µ 8 —Å–∏–º–≤–æ–ª–∞!",
            "invalid": "–ü–∞—Ä–æ–ª–∞—Ç–∞ —Å—ä–¥—ä—Ä–∂–∞ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏ —Å–∏–º–≤–æ–ª–∏!"
        }
    )

    role = forms.ChoiceField(
        choices=UserProfile.ROLE_CHOICES,
        label="–†–æ–ª—è",
        widget=forms.Select(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500'
        })
    )

    class Meta:
        model = UserProfile
        fields = ["email", "password1", "password2", "role"]

    error_messages = {
        'password_mismatch': "–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç! ‚ùå",
    }

    def clean_password1(self):
        password = self.cleaned_data.get("password1")
        try:
            validate_password(password)
        except ValidationError as e:
            raise forms.ValidationError(_("–ü–∞—Ä–æ–ª–∞—Ç–∞ –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è –Ω–∞ –∏–∑–∏—Å–∫–≤–∞–Ω–∏—è—Ç–∞: ") + " ".join(e.messages))
        return password

    def save(self, commit=True):
        user = super().save(commit=False)
        user.username = user.email  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–ø—ä–ª–≤–∞–º username —Å email
        if commit:
            user.save()
        return user


class UserLoginForm(AuthenticationForm):
    username = forms.EmailField(
        label="–ò–º–µ–π–ª",
        widget=forms.EmailInput(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è –∏–º–µ–π–ª'
        })
    )

    password = forms.CharField(
        label="–ü–∞—Ä–æ–ª–∞",
        widget=forms.PasswordInput(attrs={
            'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞'
        })
    )

    error_messages = {
        "invalid_login": "–ì—Ä–µ—à–µ–Ω –∏–º–µ–π–ª –∏–ª–∏ –ø–∞—Ä–æ–ª–∞. ‚ùå",
        "inactive": "–¢–æ–∑–∏ –∞–∫–∞—É–Ω—Ç –µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω! üö´",
    }


# class CourseForm(forms.ModelForm):
#     video_url = forms.URLField(required=False, label="–í–∏–¥–µ–æ –ª–∏–Ω–∫", widget=forms.URLInput(attrs={
#         'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
#         'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ URL –∫—ä–º –≤–∏–¥–µ–æ (YouTube, Vimeo)'
#     }))
#
#     document = forms.FileField(required=False, label="–î–æ–∫—É–º–µ–Ω—Ç (PDF)", widget=forms.ClearableFileInput(attrs={
#         'class': 'w-full px-4 py-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500'
#     }))
#
#     class Meta:
#         model = Course
#         fields = ["title", "description", "category", "price", "video_url", "document"]
#         labels = {
#             'title': '–ó–∞–≥–ª–∞–≤–∏–µ –Ω–∞ –∫—É—Ä—Å–∞',
#             'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
#             'price': '–¶–µ–Ω–∞ (–ª–≤.)',
#         }
#         widgets = {
#             'title': forms.TextInput(attrs={'class': 'w-full p-2 border rounded-lg'}),
#             'description': forms.Textarea(attrs={'class': 'w-full p-2 border rounded-lg', 'rows': 4}),
#             'price': forms.NumberInput(attrs={'class': 'w-full p-2 border rounded-lg'}),
#         }



class CourseForm(forms.ModelForm):
    title = forms.CharField(
        label="–ó–∞–≥–ª–∞–≤–∏–µ –Ω–∞ –∫—É—Ä—Å–∞",
        widget=forms.TextInput(attrs={
            'class': 'w-full p-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ –∑–∞–≥–ª–∞–≤–∏–µ'
        })
    )

    description = forms.CharField(
        label="–û–ø–∏—Å–∞–Ω–∏–µ",
        widget=forms.Textarea(attrs={
            'class': 'w-full p-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'rows': 4,
            'placeholder': '–û–ø–∏—à–µ—Ç–µ –∫—É—Ä—Å–∞'
        })
    )

    category = forms.ChoiceField(
        choices=Course.CATEGORY_CHOICES,
        label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        widget=forms.Select(attrs={
            'class': 'w-full p-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500'
        })
    )

    price = forms.DecimalField(
        label="–¶–µ–Ω–∞ (–ª–≤.)",
        max_digits=6,
        decimal_places=2,
        widget=forms.NumberInput(attrs={
            'class': 'w-full p-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ —Ü–µ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: 49.99)'
        })
    )

    video_url = forms.URLField(
        required=False,
        label="–í–∏–¥–µ–æ –ª–∏–Ω–∫",
        widget=forms.URLInput(attrs={
            'class': 'w-full p-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500',
            'placeholder': '–í—ä–≤–µ–¥–µ—Ç–µ YouTube/Vimeo –ª–∏–Ω–∫'
        })
    )

    document = forms.FileField(
        required=False,
        label="–î–æ–∫—É–º–µ–Ω—Ç (PDF)",
        widget=forms.ClearableFileInput(attrs={
            'class': 'w-full p-3 border border-gray-400 bg-gray-100 text-gray-900 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500 file:bg-blue-500 file:text-white file:px-4 file:py-2 file:rounded file:border-none file:cursor-pointer hover:file:bg-blue-700',
        })
    )

    class Meta:
        model = Course
        fields = ["title", "description", "category", "price", "video_url", "document"]
